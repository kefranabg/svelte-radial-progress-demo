import { derived, get, writable } from 'svelte/store';
export function debounce(value, delayMs = 300) {
    let timer = null;
    return derived(value, ($value, set) => {
        if (timer)
            clearTimeout(timer);
        timer = setTimeout(() => {
            set($value);
            timer = null;
        }, delayMs);
    }, get(value));
}
export function debounceTimer(delayMs = 300) {
    let timer = null;
    const _timeUp = writable(false);
    function up($timeUp) {
        if ($timeUp) {
            _timeUp.set(false);
            return true;
        }
        if (timer)
            clearTimeout(timer);
        timer = setTimeout(() => {
            _timeUp.set(true);
            timer = null;
        }, delayMs);
        return false;
    }
    return derived(_timeUp, $timeUp => ({ up: () => up($timeUp) }));
}
